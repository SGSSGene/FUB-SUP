- page: 11
  name: Objektorientierte Programmierung
  organizer: Freie Universität Berlin/Mathematik und Informatik/Informatik
  responsible: Dozentin oder Dozent des Moduls
  requirements: |
    Keine
  goals: |
    Die Studentinnen und Studenten beherrschen am Ende des Moduls imperative und
    objektorientierte Programmierkonzepte und deren Anwendbarkeit und können
    objektorientierte Modelle erstellen. Sie kennen grundlegende Datenstrukturen
    und Algorithmen und sind in der Lage, abstrakte Datentypen zu spezifizieren
    und zu implementieren. Sie kennen grundlegende Datenstrukturen und
    Algorithmen und können die Eigenschaften von kleinen Programmen formal und
    informell beweisen. Sie können objektorientierte Programme implementieren
    und dabei Entwurfsmuster problemadäquat einsetzen.
  content: |
    Es werden folgende Themen behandelt:

    - Maschinelle Modellierung des Berechenbarkeitsbegriffs (Registermaschinen)
      und zentrale Imperative Programmierkonzepte.
    - Nachweis der Eigenschaften von kleinen Programmen (Hoare-Kalkül und/oder
      wp-Kalkül).
    - Objektorientierte Programmierkonzepte (wie Klassen, Objekte, Referenzen,
      Methoden, Vererbung, polymorphe Typsysteme, Abstrakte Klassen,
      Schnittstellen, generische Klassendefinitionen, Kapselung,
      Fehlerbehandlung usw.).
    - Einfache Datenstrukturen und deren Implementierung unter Verwendung
      objektorientierter Programmiertechniken sowie grundlegende Konzepte der
      Datenabstraktion.
    - Vertiefte objektorientierte Modellierungstechniken und grundlegende
      Entwurfsmuster (Iteratoren, Beobachtermuster, Strukturmuster, MVC usw.)
    - Die Realisierung/Umsetzung der Konzepte werden anhand von modernen,
      gegenwärtig verwendeten, objektorientierten Programmiersprachen
      vorgestellt.
  teachingunit:
    - type: Vorlesung
      swstime: 4
      attendance: recommended
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, zwei mündliche Präsentationen der Lösung jeweils einer Übungsaufgabe in der Übung.
    - type: Seminar am PC
      swstime: 2
      attendance: required
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, zwei mündliche Präsentationen der Lösung jeweils einer Übungsaufgabe in der Übung.
  workload:
    - type: Präsenzzeit V
      time: 60
    - type: Vor- und Nachbereitung V
      time: 30
    - type: Präsenzzeit Ü
      time: 30
    - type: Vor- und Nachbereitung Ü
      time: 90
    - type: Prüfungsvorbereitung und Prüfung
      time: 30
  exam: |
    Klausur (120 Minuten)
  language: Deutsch
  total_work: 240
  credit_points: 8
  duration: Ein Semester
  repeat: Jedes Sommersemester
  usability: |
    Bachelorstudiengang Informatik für das Lehramt
  differentiated: true
  tags:
    - Pflichtbereich
- page: 12
  name: Logik und Diskrete Mathematik für Lehramt
  organizer: Freie Universität Berlin/Mathematik und Informatik/Informatik
  responsible: Dozentin oder Dozent des Moduls
  requirements: |
    Keine
  goals: |
    Die Studentinnen und Studenten kennen am Ende des Moduls grundlegende
    Konzepte der Logik, Mengenlehre und Kombinatorik. Sie können diese zur
    mathematischen Modellierung von Anwendungen in der Informatik anwenden. Sie
    sind in der Lage, mathematische Beweise nachzuvollziehen und im Kontext mit
    informatischen Problemstellungen einfache Beweise selbst zu entwickeln. Sie
    können abstrakt denken und einfache Sachverhalte in einer Logik
    formalisieren. Sie beherrschen grundlegende Konzepte der Diskreten
    Mathematik und können kombinatorische Techniken in der Praxis (z. B. bei
    Entwurf und Analyse von Algorithmen) anwenden.
  content: |
    Aussagenlogik und mathematische Beweistechniken

    - Boolesche Formeln und Boolesche Funktionen, DNF und KNF, Erfüllbarkeit,
      Resolutionskalkül
    - Mengenlehre: Mengen, Relationen, Äquivalenz- und Ordnungsrelationen,
      Funktionen
    - Natürliche Zahlen und vollständige Induktion, Abzählbarkeit
    - Prädikatenlogik und mathematische Strukturen
    - Kombinatorik: Abzählprinzipien, Binomialkoeffizienten und Stirling-Zahlen,
      Rekursion, Schubfachprinzip, diskrete Wahrscheinlichkeitsverteilungen
    - Graphentheorie: Graphen und ihre Darstellungen, Wege und Kreise in
      Graphen, Bäume
  teachingunit:
    - type: Vorlesung
      swstime: 4
      attendance: recommended
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, mündliche Präsentation der Lösungen von Übungsaufgaben in den Übungen.
    - type: Übung
      swstime: 2
      attendance: required
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, mündliche Präsentation der Lösungen von Übungsaufgaben in den Übungen.
  workload:
    - type: Präsenzzeit V
      time: 60
    - type: Vor- und Nachbereitung V
      time: 60
    - type: Präsenzzeit Ü
      time: 30
    - type: Vor- und Nachbereitung Ü
      time: 120
    - type: Prüfungsvorbereitung und Prüfung
      time: 30
  exam: |
    Klausur (120 Minuten); die Klausur kann auch in Form einer elektronischen
    Prüfungsleistung (120 Minuten) durchgeführt werden
  language: Deutsch
  total_work: 300
  credit_points: 10
  duration: Ein Semester
  repeat: Jedes Wintersemester
  usability: |
    60-LP-Modulangebot Informatik
  differentiated: true
  tags:
    - Pflichtbereich
- page: 13
  name: Rechnerarchitektur
  organizer: Freie Universität Berlin/Mathematik und Informatik/Informatik
  responsible: Dozentin oder Dozent des Moduls
  requirements: |
    Keine
  goals: |
    Die Studentinnen und Studenten verstehen am Ende des Moduls: die
    grundlegenden Architekturmerkmale von Rechnersystemen, die Interaktionen der
    Architekturmerkmale in Mehrkern- und Mehrprozessorsystemen, die elementaren
    Möglichkeiten der Beschleunigung von Rechnersystemen.
  content: |
    Themenbereiche sind hier insbesondere Harvard/v. Neumann-Architektur,
    Mikroarchitektur RISC/CISC, Mikroprogrammierung, Pipelining, Cache,
    Speicherhierarchie, Bussysteme, Assemblerprogrammierung,
    Multiprozessorsysteme, VLIW, Sprungvorhersage. Ebenso werden interne
    Zahlendarstellungen, Rechnerarithmetik und die Repräsentation weiterer
    Datentypen im Rechner behandelt.
  teachingunit:
    - type: Vorlesung
      swstime: 2
      attendance: recommended
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, mündliche Präsentation der Lösungen von Übungsaufgaben in den Übungen.
    - type: Seminar am PC
      swstime: 2
      attendance: required
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, mündliche Präsentation der Lösungen von Übungsaufgaben in den Übungen.
  workload:
    - type: Präsenzzeit V
      time: 30
    - type: Vor- und Nachbereitung V
      time: 30
    - type: Präsenzzeit SPC
      time: 15
    - type: Betreutes Selbststudium am PC
      time: 15
    - type: Prüfungsvorbereitung und Prüfung
      time: 60
  exam: |
    Klausur (60 Minuten); die Klausur kann auch in Form einer elektronischen
    Prüfungsleistung (60 Minuten) durchgeführt werden
  language: Deutsch
  total_work: 150
  credit_points: 5
  duration: Ein Semester
  repeat: Jedes Wintersemester
  usability: |
    60-LP-Modulangebot Informatik
  differentiated: true
  modification:
    - Dies ist in der Modulbeschreibung als "Pflichtmodul" aber in Paragarph 19 als
      "Wahlpflichtmodul" gelistet. Ich gehe davon aus das es ein Wahlpflichtmodul
      ist
  tags:
    - Wahlpflichtbereich
- page: 14
  name: Betriebs- und Kommunikationssysteme
  organizer: Freie Universität Berlin/Mathematik und Informatik/Informatik
  responsible: Dozentin oder Dozent des Moduls
  requirements: |
    Keine
  goals: |
    Die Studentinnen und Studenten verstehen am Ende des Moduls: die Rolle des
    Betriebssystems als Abstraktion des Rechnersystems, den grundlegenden Aufbau
    aktueller Betriebssysteme, die Funktion und den Aufbau des Internets. Sie
    können Rechner auf Assembler-Ebene und systemnah programmieren, können die
    Vor- und Nachteile verschiedener Mechanismen (PIO vs. DMA, polling vs.
    Interrupt, paging vs. Segmentation usw.) beurteilen, Mechanismen von
    Betriebssystemen sinnvoll einsetzen, können Programme über das Netzwerk
    kommunizieren lassen. Ein-/Ausgabe-Systeme, DMA/PIO,
    Unterbrechungsbehandlung, Puffer, Prozesse/Threads, virtueller Speicher,
    UNIX und Windows, Shells, Utilities, Peripherie und Vernetzung, Netze,
    Medien, Medienzugriff, Protokolle, Referenzmodelle, TCP/IP, grundlegender
    Aufbau des Internets
  content: |
    Themenbereiche sind hier insbesondere Ein-/Ausgabe-Systeme, DMA/PIO,
    Unterbrechungsbehandlung, Puffer, Prozesse/Threads, virtueller Speicher,
    UNIX und Windows, Shells, Utilities, Peripherie und Vernetzung, Netze,
    Medien, Medienzugriff, Protokolle, Referenzmodelle, TCP/IP, grundlegender
    Aufbau des Internets.
  teachingunit:
    - type: Vorlesung
      swstime: 2
      attendance: recommended
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, mündliche Präsentation der Lösungen von Übungsaufgaben in den Übungen.
    - type: Seminar am PC
      swstime: 2
      attendance: required
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, mündliche Präsentation der Lösungen von Übungsaufgaben in den Übungen.
  workload:
    - type: Präsenzzeit V
      time: 60
    - type: Vor- und Nachbereitung V
      time: 30
    - type: Präsenzzeit Ü
      time: 30
    - type: Vor- und Nachbereitung Ü
      time: 120
    - type: Prüfungsvorbereitung und Prüfung
      time: 30
  exam: |
    Klausur (60 Minuten); die Klausur kann auch in Form einer elektronischen
    Prüfungsleistung (60 Minuten) durchgeführt werden
  language: Deutsch
  total_work: 180
  credit_points: 5
  duration: Ein Semester
  repeat: Jedes Sommersemester
  usability: |
    Für die übrigen Module des Pflichtbereichs wird auf die Studien- und
    Prüfungsordnung für den Bachelorstudiengang Informatik des Fachbereichs
    Mathematik und Informatik der Freien Universität Berlin verwiesen.
    Verwendbarkeit: 60-LP-Modulangebot Informatik
  differentiated: true
  modification:
    - Dies ist in der Modulbeschreibung als "Pflichtmodul" aber in Paragarph 19 als
      "Wahlpflichtmodul" gelistet. Ich gehe davon aus das es ein Wahlpflichtmodul
      ist
  tags:
    - Wahlpflichtbereich
- page: 14
  name: Funktionale Programmierung
  link: inf_bsc_2014
  tags:
    - Pflichtbereich
- page: 14
  name: Datenbanksysteme
  link: inf_bsc_2014
  tags:
    - Pflichtbereich
- page: 14
  name: Grundlagen der Theoretischen Informatik
  link: inf_bsc_2014
  tags:
    - Pflichtbereich
- page: 14
  name: Algorithmen, Datenstrukturen und Datenabstraktion
  link: inf_bsc_2014
  tags:
    - Pflichtbereich
- page: 15
  name: Nichtsequentielle und verteilte Programmierung für Lehramt
  organizer: Freie Universität Berlin/Mathematik und Informatik/Informatik
  responsible: Dozentin oder Dozent des Moduls
  requirements: |
    Erfolgreiche Absolvierung des Moduls „Objektorientierte Programmierung“
  goals: |
    Die Studentinnen und Studenten verstehen die Grundbegriffe der
    nichtsequentiellen Programmierung mit gemeinsamen Speicher und
    Nachrichtenaustausch. Sie können nichtsequentielle Programme mit
    Prozessen/Threads/aktiven Objekten geeignet strukturieren und durch
    geeignete Synchronisationsverfahren unerwünschte nichtdeterministische
    Effekte sowie Verklemmungen vermeiden. Sie kennen und verstehen
    Sicherheitsrisiken, die in nichtsequentiellen Programmen entstehen können
    und können Methoden einsetzen, diese zu vermeiden. Sie können Eigenschaften
    von Prozessen und Threads formal spezifizieren und diese exemplarisch
    verifizieren.

    Die Studentinnen und Studenten können relevante Interaktionsparadigmen wie
    Client/Server und Peer-to-Peer unterscheiden und eigene Anwendungen nach
    diesen Paradigmen geeignet einordnen und verteilte Systeme auf der Basis von
    Interprozesskommunikation und Fernaufrufen konstruieren. Sie können
    Webanwendungen, Kunde/Dienstleister-Anwendungen, Peer-to-Peer-Anwendungen
    geeignet entwerfen, strukturieren und realisieren und verteilte Systeme
    mithilfe geeigneter Middleware entwickeln.
  content: |
    Programmieren und Synchronisieren von gleichzeitig laufenden Prozessen, die
    auf gemeinsamen Speicher zugreifen oder über Nachrichtenaustausch
    interagieren.

    - Nichtsequentielle Programme und Prozesse in ihren verschiedenen
      Ausprägungen, Nichtdeterminismus, Determinierung
    - Synchronisationsmechanismen: Sperren, Monitore, Wachen, Ereignisse,
      Semaphore
    - Nichtsequentielle Programmausführung und Objektorientierung
    - Ablaufsteuerung, Auswahlstrategien, Prioritäten, Umgang mit und Vermeidung
      von Verklemmung
    - Koroutinen, Implementierung, Mehrprozessorsysteme
    - Interaktion über Nachrichten, Sicherheitsaspekte von Anwendungen im
      Netzwerk
    - Programmieren und Synchronisieren von gleichzeitig laufenden Prozessen,
      die über Nachrichtenaustausch interagieren
    - Fernaufruftechniken
    - Client-Server, Peer-to-Peer
    - Parallelrechnen im Netz
    - Koordinierungssprachen, Orchestrierung, Choreographie
    - Verarbeitung auf dem Server und auf dem Client, Mobilität
    - Middleware, strukturierte Kommunikation, statische und dynamische
      Schnittstellen
    - Ereignisbasierte und strombasierte Verarbeitung
    - Sicherheit von Anwendungen im Netzwerk, Absicherung der Protokolle
    - Ausblick auf nichtfunktionale Eigenschaften (Zeit, Speicher, Dienstgüte)

    Kenntnisse des Moduls „Algorithmen, Datenstrukturen und Datenabstraktion“
    werden vorausgesetzt. Im Selbststudium erwerben die Studentinnen und Studenten
    Kenntnisse über Betriebssysteme, die im Zusammenhang mit nichtsequentieller
    Programmierung stehen (etwa Pipelining, Cache, Speicherhierarchie,
    Unterbrechungsbehandlung, Puffer, Prozesse/Threads).
  teachingunit:
    - type: Vorlesung
      swstime: 4
      attendance: recommended
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, mündliche Präsentation der
        Lösungen von Übungsaufgaben in den Übungen.
    - type: Übung
      swstime: 2
      attendance: required
      activity: |
        Schriftliche Bearbeitung der Übungsblätter, mündliche Präsentation der
        Lösungen von Übungsaufgaben in den Übungen.
  workload:
    - type: Präsenzzeit V
      time: 60
    - type: Vor- und Nachbereitung V
      time: 30
    - type: Präsenzzeit Ü
      time: 30
    - type: Vor- und Nachbereitung Ü
      time: 120
    - type: Prüfungsvorbereitung und Prüfung
      time: 30
  exam: |
    Klausur (120 Minuten); die Klausur kann auch in Form einer elektronischen
    Prüfungsleistung (120 Minuten) durchgeführt werden
  language: Deutsch
  total_work: 300
  credit_points: 10
  duration: Ein Semester
  repeat: Jedes Sommersemester
  usability: |
    Bachelorstudiengang Informatik für das Lehramt
    60-LP-Modulangebot Informatik
  differentiated: true
  tags:
    - Wahlpflichtbereich
- page: 15
  name: Softwaretechnik
  link: inf_bsc_2014
  tags:
    - Wahlpflichtbereich
- page: 15
  name: Systemverwaltung
  link: inf_bsc_2014
  tags:
    - Wahlpflichtbereich
- page: 15
  name: Softwareprojekt B
  link: inf_bsc_2014
  tags:
    - Wahlpflichtbereich
- page: 15
  name: Auswirkung der Informatik
  link: inf_bsc_2014
  tags:
    - Wahlpflichtbereich
- page: 15
  name: Gesellschaftliche Aspekte der Informatik
  link: inf_bsc_2014
  tags:
    - Wahlpflichtbereich
- page: 15
  name: Grundlagen der Technischen Informatik
  link: inf_bsc_2014
  tags:
    - Wahlpflichtbereich
- page: 15
  name: Forschungspraktikum
  link: inf_bsc_2014
  tags:
    - Wahlpflichtbereich
- page: 15
  name: Wissenschaftliches Arbeiten in der Informatik
  link: inf_bsc_2014
  tags:
    - Wahlpflichtbereich
